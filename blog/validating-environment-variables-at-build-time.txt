1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-74f3fbc382a61318.js","282","static/chunks/app/blog/validating-environment-variables-at-build-time/page-fd67f11fe577caa9.js"],""]
3:I[3143,["173","static/chunks/173-74f3fbc382a61318.js","177","static/chunks/app/layout-2ffbcdf361864cb5.js"],"ThemeSwitcher"]
4:I[5244,[],""]
5:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/media/a34f9d1faa5f3315-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/87f2400ac2a0f993.css","style"]
:HL["/_next/static/css/fadc07fb3bbae6bd.css","style"]
0:{"P":null,"b":"XVUngniZc2pOU0gZQMQhw","p":"","c":["","blog","validating-environment-variables-at-build-time"],"i":false,"f":[[["",{"children":["blog",{"children":["validating-environment-variables-at-build-time",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/87f2400ac2a0f993.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","data-theme":"light","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"id":"meta-theme-color","name":"theme-color"}],["$","link",null,{"id":"dark-css","rel":"stylesheet","href":"/dark.css","suppressHydrationWarning":true}],["$","link",null,{"id":"light-css","rel":"stylesheet","href":"/light.css","suppressHydrationWarning":true}]]}],["$","body",null,{"className":"__className_d65c78","children":[["$","script",null,{"src":"/theme.js"}],["$","div",null,{"className":"flex justify-center px-4","children":["$","div",null,{"className":"flex flex-col h-dvh max-w-screen-lg w-full","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L2",null,{"className":"btn btn-ghost no-animation text-xl","href":"/","children":"Home"}]}],["$","div",null,{"className":"flex-none pr-2","children":[["$","$L2",null,{"className":"btn btn-ghost no-animation text-xl","href":"/about","children":"About"}],["$","$L2",null,{"className":"btn btn-ghost no-animation text-xl","href":"/blog","children":"Blog"}]]}],["$","$L3",null,{}]]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["validating-environment-variables-at-build-time",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","validating-environment-variables-at-build-time","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","div",null,{"className":"flex justify-center py-8","children":["$","div",null,{"className":"max-w-screen-md w-full","children":[["$","div",null,{"className":"pb-4","children":["$","$L2",null,{"className":"flex items-center justify-center size-[48px] rounded-full btn-ghost","href":"/blog","children":["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":32,"height":32,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}]}]}],["$","article",null,{"className":"prose prose-lg","children":[["$","title",null,{"children":"Validating Your Environment Variables at Build Time • Alessio Palladino"}],"\n",["$","h1",null,{"children":"Validating Your Environment Variables at Build Time"}],"\n",["$","div",null,{"children":["$","small",null,{"children":["$","i",null,{"children":"Published December 7th, 2024"}]}]}],"\n",["$","div",null,{"children":["$","small",null,{"children":["$","i",null,{"children":"Updated March 2nd, 2025"}]}]}],"\n",["$","p",null,{"children":"Today I'd like to share a simple idea with you in a short and sweet article.\nNot so long ago, at work, we suffered an unexpected bug when an environment variable was missing from one of our web apps.\nTo prevent similar bugs in the future, we decided to validate our environment variables at build time.\nIn the next few paragraphs I'll go over how we did that and discuss alternative implementations."}],"\n",["$","h2",null,{"id":"the-value-of-validating-your-environment-variables-at-build-time","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#the-value-of-validating-your-environment-variables-at-build-time","className":"no-underline","children":"The Value of Validating Your Environment Variables at Build Time"}]}],"\n",["$","p",null,{"children":"It must be said that the kinds of bugs I mentioned above are rare. But, when they happen in production… they can be catastrophic.\nOf course these cases are unlikely to happen thanks to version control systems and code reviews, but unlikely does not mean impossible."}],"\n",["$","p",null,{"children":["There's also a lot of value in doing this for your development environment.\nIt has often happened that I and other engineers I work with end up wasting time investigating why an app isn't behaving properly in our local environment.\nOnly to find out we had a misconfigured ",["$","code",null,{"children":".env"}]," file. Sometimes the ",["$","code",null,{"children":".env"}]," file was missing altogether."]}],"\n",["$","p",null,{"children":["This may happen more often in my case, at work.\nThe reason being that we host multiple apps in a monorepo and use ",["$","a",null,{"href":"https://nx.dev/","children":"Nx"}]," to swiftly generate new apps.\nWe commit a distribution version of our ",["$","code",null,{"children":".env"}]," file (",["$","code",null,{"children":".env.dist"}],") for every app.\nTherefore, when moving from app to app you can see how there may be issues with misconfigured or missing ",["$","code",null,{"children":".env"}]," files, which are untracked by Git, not matching the ",["$","code",null,{"children":".env.dist"}]," examples."]}],"\n",["$","h2",null,{"id":"technical-implementation","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#technical-implementation","className":"no-underline","children":"Technical Implementation"}]}],"\n",["$","p",null,{"children":"Now on to how to actually do this in Next.js. Really it's just two steps:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Define a schema"}],"\n",["$","li",null,{"children":["Validate ",["$","code",null,{"children":"process.env"}]," in your ",["$","code",null,{"children":"next.config.ts"}]]}],"\n"]}],"\n",["$","h3",null,{"id":"define-a-schema","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#define-a-schema","className":"no-underline","children":"Define a Schema"}]}],"\n",["$","p",null,{"children":[["$","a",null,{"href":"https://zod.dev/","children":"Zod"}],"\nis a great tool to handle this, though at work we use ",["$","a",null,{"href":"https://gcanti.github.io/io-ts/","children":"io-ts"}],".\nBoth are similar. However, in this post I'll use Zod since it's more widely used."]}],"\n",["$","p",null,{"children":["Now, you'll likely want to establish a convention for the name and location of your schema.\nFor example we created a file called ",["$","code",null,{"children":"dotEnv.ts"}]," in the root of each of our application projects."]}],"\n",["$","p",null,{"children":["In our case let's call this file ",["$","code",null,{"children":"envSchema.ts"}]," and place it in the root of our project:"]}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-ts hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">import</span> { z } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;zod&quot;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> envSchema = z.<span class=\"hljs-title function_\">object</span>({\n  <span class=\"hljs-attr\">ENVIRONMENT</span>: z.<span class=\"hljs-title function_\">union</span>([z.<span class=\"hljs-title function_\">literal</span>(<span class=\"hljs-string\">&quot;development&quot;</span>), z.<span class=\"hljs-title function_\">literal</span>(<span class=\"hljs-string\">&quot;production&quot;</span>)]),\n})\n"}}]}],"\n",["$","p",null,{"children":["Define whatever schema you need depending on the variables in your ",["$","code",null,{"children":".env"}]," file."]}],"\n",["$","h3",null,{"id":"parse-processenv","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#parse-processenv","className":"no-underline","children":["Parse ",["$","code",null,{"children":"process.env"}]]}]}],"\n",["$","p",null,{"children":["Then in your ",["$","code",null,{"children":"next.config.ts"}],", you can simply validate ",["$","code",null,{"children":"process.env"}]," against the schema:"]}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-ts hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextConfig</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next&quot;</span>\n<span class=\"hljs-keyword\">import</span> { envSchema } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./envSchema&quot;</span>\n\nenvSchema.<span class=\"hljs-title function_\">parse</span>(process.<span class=\"hljs-property\">env</span>)\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">nextConfig</span>: <span class=\"hljs-title class_\">NextConfig</span> = {\n"}}]}],"\n",["$","p",null,{"children":["The difference with other articles I've seen regarding this topic is the location where we're doing the validation.\nHere we're in the ",["$","code",null,{"children":"next.config.ts"}]," file, and in case the validation fails, ",["$","code",null,{"children":"parse()"}]," throws an error.\nEffectively breaking the build process, which will also break any CD pipeline. It's weird to say but that's what we want.\nI'd rather a functioning version of the app stay in production, instead of a buggy one due to misconfigured environment variables.\nBesides, the error that is thrown is easy to recognize and easier to fix."]}],"\n",["$","p",null,{"children":["One thing to know is that the ",["$","code",null,{"children":"next.config.ts"}]," configuration is loaded multiple times, sometimes by different processes.\nTherefore adding lots of extra complexity may slow things down.\nIn our case the complexity we introduced is minimal, especially considering the benefits we get in return."]}],"\n",["$","p",null,{"children":["Something you may want to do is limit this logic to a specific context in which the configuration is being loaded.\nFor that you can specify a\n",["$","a",null,{"href":"https://nextjs.org/docs/pages/api-reference/next-config-js#phase","children":"phase"}],"\nin which to validate the environment."]}],"\n",["$","h2",null,{"id":"extra-features","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#extra-features","className":"no-underline","children":"Extra Features"}]}],"\n",["$","p",null,{"children":"You can stop here, the implementation doesn't need to get more complicated and you don't need to introduce other\ntools or libraries to do more. In this case only a few lines of extra code add a world of benefit as far as the robustness\nof our app is concerned. In fact, we haven't gone any further with this at work (yet). But, in the spirit of exploring additional benefits,\nI'd like to address a few extra points."}],"\n",["$","h3",null,{"id":"exporting-the-parsed-environment-variables","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#exporting-the-parsed-environment-variables","className":"no-underline","children":"Exporting the Parsed Environment Variables"}]}],"\n",["$","p",null,{"children":["Once you've validated ",["$","code",null,{"children":"process.env"}]," you can store the result and export it. Using that throughout your app instead of calling ",["$","code",null,{"children":"process.env"}],"."]}],"\n",["$","p",null,{"children":["Personally I think this sounds good, but in practice I don't like that there's nothing preventing developers from accessing ",["$","code",null,{"children":"process.env"}],".\nHaving two sources of truth hurts readability and adds unnecessary complexity.\nThe same could be said for exporting the ",["$","em",null,{"children":"type"}]," of the environment variables."]}],"\n",["$","h3",null,{"id":"extending-the-global-processenv","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#extending-the-global-processenv","className":"no-underline","children":["Extending the global ",["$","code",null,{"children":"ProcessEnv"}]]}]}],"\n",["$","p",null,{"children":["Instead of directly exporting the ",["$","em",null,{"children":"type"}]," of the environment variables,\nyou can extend the global ",["$","code",null,{"children":"ProcessEnv"}]," type by telling zod to infer the types derivable from the schema we defined earlier."]}],"\n",["$","p",null,{"children":["This is cute since you can get nice autocomplete suggestions in your editor when accessing ",["$","code",null,{"children":"process.env"}],".\nHowever, no matter the inferred types, the actual value will always be a string, that's just how ",["$","code",null,{"children":"process.env"}]," works.\nFor that reason, I would avoid this extra implementation."]}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-ts hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-variable language_\">global</span> {\n  <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title class_\">NodeJS</span> {\n    <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ProcessEnv</span> <span class=\"hljs-keyword\">extends</span> z.infer&lt;typeof envSchema&gt; {}\n  }\n}\n"}}]}],"\n",["$","h3",null,{"id":"using-an-external-library","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#using-an-external-library","className":"no-underline","children":"Using an External Library"}]}],"\n",["$","p",null,{"children":[["$","a",null,{"href":"https://env.t3.gg/","children":"Create T3 App"}]," has an interesting approach to this problem, creating a\n",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy","children":"Proxy"}],"\nfor ",["$","code",null,{"children":"process.env"}]," to get the nice features I mentioned above, and more.\nIn my opinion if you need that extra strictness and robustness for your application, this library could be for you."]}],"\n",["$","p",null,{"children":["However, in most cases a simple approach as mentioned in the beginning of this post can be enough to prevent the worst bugs.\nAdditionally, Next.js handles ",["$","code",null,{"children":".env"}]," files out of the box and provides useful conventions such as splitting client and server environment variables simply by\nprefixing the variables with ",["$","code",null,{"children":"NEXT_PUBLIC_"}],".\nBy adopting the T3 tool you lose these goodies and must instead adopt the library's conventions (such as splitting your schemas between client and server).\nSo keep that in mind."]}],"\n",["$","h2",null,{"id":"conclusion","className":"styles_linktitle__p04j4","children":["$","a",null,{"href":"#conclusion","className":"no-underline","children":"Conclusion"}]}],"\n",["$","p",null,{"children":"Validating your environment variables at build time can be incredibly useful.\nWith just a few lines of code you get an easy win.\nBeyond that, you're free to choose how much more you want to implement yourself before deciding to adopt an external tool."}],"\n",["$","p",null,{"children":["Update: Since this article was published, at work we've extended our environment variable validation to our React Native applications.\nTherefore an additional advantage to owning your own simple implementation is that you can also handle this validation for React Native.\nThe only difference being that instead of validating your schema in the ",["$","code",null,{"children":"next.config.ts"}],", you need to do it in your\n",["$","code",null,{"children":"metro.config.js"}],". Of course the other difference is that you'll need to convert the code to JavaScript, so there will be small syntax differences."]}]]}]]}]}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fadc07fb3bbae6bd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","K8jCIApVkP7Ll6HZQWe-F",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","link","1",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x32"}]]
7:null
