1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-74f3fbc382a61318.js","770","static/chunks/app/blog/how-i-handle-syntax-highlighting/page-4db2825597e1d112.js"],""]
3:I[3143,["173","static/chunks/173-74f3fbc382a61318.js","177","static/chunks/app/layout-2ffbcdf361864cb5.js"],"ThemeSwitcher"]
4:I[5244,[],""]
5:I[3866,[],""]
7:I[6213,[],"OutletBoundary"]
9:I[6213,[],"MetadataBoundary"]
b:I[6213,[],"ViewportBoundary"]
d:I[4835,[],""]
:HL["/_next/static/media/a34f9d1faa5f3315-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/b7d7f387b981c55f.css","style"]
6:Td0c,<span class="hljs-keyword">import</span> { codeBlockPropsSchema } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/schemas&quot;</span>
<span class="hljs-keyword">import</span> hljs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;highlight.js&quot;</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">MDXComponents</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mdx/types&quot;</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useMDXComponents</span>(<span class="hljs-params"><span class="hljs-attr">components</span>: <span class="hljs-title class_">MDXComponents</span></span>): <span class="hljs-title class_">MDXComponents</span> {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">pre</span>: <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {
      <span class="hljs-keyword">const</span> result = codeBlockPropsSchema.<span class="hljs-title function_">safeParse</span>(props)

      <span class="hljs-keyword">if</span> (result.<span class="hljs-property">error</span>) {
        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span> {<span class="hljs-attr">...props</span>} /&gt;</span></span>
      }

      <span class="hljs-keyword">const</span> { className, <span class="hljs-attr">children</span>: code } = result.<span class="hljs-property">data</span>.<span class="hljs-property">children</span>.<span class="hljs-property">props</span>
      <span class="hljs-keyword">const</span> language = className.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>]

      <span class="hljs-keyword">let</span> html = <span class="hljs-literal">undefined</span>
      <span class="hljs-keyword">try</span> {
        html = hljs.<span class="hljs-title function_">highlight</span>(code, {
          <span class="hljs-attr">language</span>: language,
        }).<span class="hljs-property">value</span>
      } <span class="hljs-keyword">catch</span> {
        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span> {<span class="hljs-attr">...props</span>} /&gt;</span></span>
      }

      <span class="hljs-keyword">return</span> (
        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">code</span>
            <span class="hljs-attr">className</span>=<span class="hljs-string">{</span>`${<span class="hljs-attr">className</span>} <span class="hljs-attr">hljs</span>`}
            <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">{{</span>
              <span class="hljs-attr">__html:</span> <span class="hljs-attr">html</span>,
            }}
          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span>
      )
    },
    ...components,
  }
}
0:{"P":null,"b":"TOvPJ9hLUBT9lbki7rF0b","p":"","c":["","blog","how-i-handle-syntax-highlighting"],"i":false,"f":[[["",{"children":["blog",{"children":["how-i-handle-syntax-highlighting",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b7d7f387b981c55f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","data-theme":"light","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"id":"meta-theme-color","name":"theme-color"}],["$","link",null,{"id":"dark-css","rel":"stylesheet","href":"/dark.css","suppressHydrationWarning":true}],["$","link",null,{"id":"light-css","rel":"stylesheet","href":"/light.css","suppressHydrationWarning":true}]]}],["$","body",null,{"className":"__className_d65c78","children":[["$","script",null,{"src":"/theme.js"}],["$","div",null,{"className":"flex justify-center px-4","children":["$","div",null,{"className":"flex flex-col h-dvh max-w-screen-lg w-full","children":[["$","div",null,{"className":"navbar","children":[["$","div",null,{"className":"flex-1","children":["$","$L2",null,{"className":"btn btn-ghost no-animation text-xl","href":"/","children":"Home"}]}],["$","div",null,{"className":"flex-none pr-2","children":[["$","$L2",null,{"className":"btn btn-ghost no-animation text-xl","href":"/about","children":"About"}],["$","$L2",null,{"className":"btn btn-ghost no-animation text-xl","href":"/blog","children":"Blog"}]]}],["$","$L3",null,{}]]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["how-i-handle-syntax-highlighting",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","how-i-handle-syntax-highlighting","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","div",null,{"className":"flex justify-center py-8","children":["$","div",null,{"className":"max-w-screen-md w-full","children":[["$","div",null,{"className":"pb-4","children":["$","$L2",null,{"className":"flex items-center justify-center size-[48px] rounded-full btn-ghost","href":"/blog","children":["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":32,"height":32,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}]}]}],["$","article",null,{"className":"prose prose-lg","children":[["$","title",null,{"children":"How I Handle Syntax Highlighting â€¢ Alessio Palladino"}],"\n",["$","h1",null,{"children":"How I Handle Syntax Highlighting"}],"\n",["$","div",null,{"children":["$","small",null,{"children":["$","i",null,{"children":"Published March 1st, 2025"}]}]}],"\n",["$","p",null,{"children":["For my first post of 2025, I'll go over how I handle syntax highlighting on my blog. Or in other words,\nhow to make ",["$","a",null,{"href":"https://highlightjs.org/","children":"highlight.js"}],", ",["$","a",null,{"href":"https://mdxjs.com/","children":"MDX"}],", and ",["$","a",null,{"href":"https://nextjs.org/docs/app","children":"Next.js's App Router"}]," play together nicely."]}],"\n",["$","h1",null,{"children":"A Little Background"}],"\n",["$","p",null,{"children":"The idea for my blog is to have it be statically generated, since most of the content is itself static."}],"\n",["$","p",null,{"children":["Having pre-built pages generally makes the entire experience faster, and going along with this idea,\nI also leverage React Server Components using Next's App Router.\nThese components require very little work on the client:\nthey render exclusively on the server, are not included in the JS bundle, never hydrate, and never re-render.\nI always refer to Josh Comeau's ",["$","a",null,{"href":"https://www.joshwcomeau.com/react/server-components/","children":"Making Sense of React Server Components"}]," when I need a refresher on RSCs."]}],"\n",["$","p",null,{"children":"I also use MDX to write my blog posts. This allows me to use markdown in combination with React components in the same file, and therefore in the same page!"}],"\n",["$","h1",null,{"children":"The Problem"}],"\n",["$","p",null,{"children":"Sounds great right? But the problem is that MDX does not support syntax highlighting. I wanted a simple way to apply syntax highlighting to the code blocks in my articles,\nwhile avoiding any extra work on the client."}],"\n",["$","p",null,{"children":["I've used highlight.js in the past and have been extremely satisfied with its performance and DX, so I set out to integrate it once more in my application.\nAll I want to do is specify a code block using the triple backtick notation in my ",["$","code",null,{"children":".mdx"}]," file, then MDX and highlight.js should take care of it from there."]}],"\n",["$","h1",null,{"children":"A Solution"}],"\n",["$","p",null,{"children":"Let's take a look at a possible solution together."}],"\n",["$","p",null,{"children":["In the end, it's fairly simple.\nWe'll simply be using the highlights.js ",["$","code",null,{"children":"highlight()"}]," method to output the required html in the ",["$","code",null,{"children":"useMDXComponents()"}]," hook.\nHowever, there are some small implementation details that are kind of tricky."]}],"\n",["$","h2",null,{"children":"The highlight() Method"}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"highlight()"}]," method takes your code as a string and returns an html string with highlighting markup."]}],"\n",["$","p",null,{"children":["We'll need to pass two arguments to ",["$","code",null,{"children":"highlight()"}],": the code, and the language it's written in."]}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-ts hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;highlight.js&quot;</span>\n\n<span class=\"hljs-keyword\">const</span> html = hljs.<span class=\"hljs-title function_\">highlight</span>(<span class=\"hljs-string\">&#x27;const greeting = &quot;Hello, World!&quot;&#x27;</span>, {\n  <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">&quot;ts&quot;</span>,\n}).<span class=\"hljs-property\">value</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(html)\n"}}]}],"\n",["$","p",null,{"children":"The output html will be:"}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-text hljs","dangerouslySetInnerHTML":{"__html":"&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; greeting = &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;\n"}}]}],"\n",["$","p",null,{"children":["Notice the CSS classes highlight.js uses to apply syntax highlighting: ",["$","code",null,{"children":"hljs-keyword"}],", ",["$","code",null,{"children":"hljs-string"}],"...\nFor this to work, you'll need to include a highlight.js stylesheet.\nThere are plenty of themes to choose from on the\n",["$","a",null,{"href":"https://github.com/highlightjs/highlight.js/tree/main/src/styles","children":"highlight.js GitHub repo"}],"."]}],"\n",["$","h2",null,{"children":"Configuring the useMDXComponents() Hook"}],"\n",["$","p",null,{"children":["The Next.js documentation has a great page on ",["$","a",null,{"href":"https://nextjs.org/docs/pages/building-your-application/configuring/mdx","children":"configuring MDX"}],"."]}],"\n",["$","p",null,{"children":["As stated in the docs, to use MDX with the Next App Router, we need an ",["$","code",null,{"children":"mdx-components.tsx"}]," file.\nThis is where we have our ",["$","code",null,{"children":"useMDXComponents()"}]," hook. Remember, at its core MDX takes your markdown file and transforms it into html.\nThis hook basically lets you tell MDX how to process the different html tags it comes across for any given file."]}],"\n",["$","p",null,{"children":["When MDX comes across the markdown for a code block, it'll render a ",["$","code",null,{"children":"<pre>"}]," html tag wrapping a ",["$","code",null,{"children":"<code>"}]," tag.\nIt's at this point that we'll want to call the",["$","code",null,{"children":"highlight()"}]," method:"]}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-tsx hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useMDXComponents</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">components</span>: <span class=\"hljs-title class_\">MDXComponents</span></span>): <span class=\"hljs-title class_\">MDXComponents</span> {\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> call highlight() method here</span>\n    <span class=\"hljs-attr\">pre</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span></span>,\n    ...components,\n  }\n}\n"}}]}],"\n",["$","p",null,{"children":["Given a ",["$","code",null,{"children":"const greeting = \"Hello, World!\""}]," code block, if we inspect the ",["$","code",null,{"children":"props"}]," object we'll see something that looks like this:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"{\n  children: {\n    '$$typeof': Symbol(react.transitional.element),\n    type: 'code',\n    key: null,\n    props: {\n      className: 'language-ts',\n      children: 'const greeting = \"Hello, World!\"\\n'\n    },\n    _owner: {\n      name: '_createMdxContent',\n      env: 'Server',\n      key: null,\n      owner: [Object],\n      props: [Object]\n    },\n    _store: {}\n  }\n}\n"}]}],"\n",["$","p",null,{"children":["As you can see we want to access ",["$","code",null,{"children":"props.children.props.className"}]," to get the language and ",["$","code",null,{"children":"props.children.props.children"}]," to get the code itself."]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"props.children.props.className"}]," is a string that looks like ",["$","code",null,{"children":"language-<language>"}],".\nWhere ",["$","code",null,{"children":"<language>"}]," is the language specified in the markdown for the code block.\nWe'll want to ",["$","code",null,{"children":"split()"}]," the string to get the language without the prepended ",["$","code",null,{"children":"language-"}],", and pass it to the ",["$","code",null,{"children":"highlight()"}]," method.\nThe full ",["$","code",null,{"children":"language-<language>"}]," string is still needed because it's a higlight.js class name used\nto apply the CSS necessary for syntax highlighting."]}],"\n",["$","h3",null,{"children":"Props Type Problem"}],"\n",["$","p",null,{"children":["Unfortunately, the type of ",["$","code",null,{"children":"props"}]," is not accurate enough for our needs:"]}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-ts hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-title class_\">DetailedHTMLProps</span>&lt;<span class=\"hljs-title class_\">HTMLAttributes</span>&lt;<span class=\"hljs-title class_\">HTMLPreElement</span>&gt;, <span class=\"hljs-title class_\">HTMLPreElement</span>&gt;\n"}}]}],"\n",["$","p",null,{"children":["We're missing the ",["$","code",null,{"children":"prop.children.props.className"}]," and ",["$","code",null,{"children":"prop.children.props.children"}]," properties."]}],"\n",["$","p",null,{"children":["Additionally, there could be other instances where MDX needs to render a ",["$","code",null,{"children":"<pre>"}]," tag, and we don't want to apply syntax highlighting in those cases."]}],"\n",["$","p",null,{"children":["This is an apt situation to use a library like ",["$","code",null,{"children":"zod"}]," to: define a schema for our props object, assert we're getting\na code block, and act accordingly."]}],"\n",["$","p",null,{"children":"Given the props we expect to receive in case of a code block, we can define the following schema:"}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-ts hljs","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-keyword\">import</span> { z } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;zod&quot;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> codeBlockPropsSchema = z.<span class=\"hljs-title function_\">object</span>({\n  <span class=\"hljs-attr\">children</span>: z.<span class=\"hljs-title function_\">object</span>({\n    <span class=\"hljs-attr\">type</span>: z.<span class=\"hljs-title function_\">literal</span>(<span class=\"hljs-string\">&quot;code&quot;</span>),\n    <span class=\"hljs-attr\">props</span>: z.<span class=\"hljs-title function_\">object</span>({\n      <span class=\"hljs-attr\">className</span>: z.<span class=\"hljs-title function_\">string</span>().<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&quot;language-&quot;</span>),\n      <span class=\"hljs-attr\">children</span>: z.<span class=\"hljs-title function_\">string</span>(),\n    }),\n  }),\n})\n"}}]}],"\n",["$","h2",null,{"children":"Putting it all Together"}],"\n",["$","p",null,{"children":["Now we're ready to put everything together. We'll return a ",["$","code",null,{"children":"<pre>"}]," tag wrapping a ",["$","code",null,{"children":"<code>"}]," tag where we'll need\nto use the ",["$","code",null,{"children":"dangerouslySetInnerHTML"}]," prop to correctly render the html outputted by the ",["$","code",null,{"children":"highlight()"}]," method."]}],"\n",["$","p",null,{"children":["Another detail is that ",["$","code",null,{"children":"highlight()"}]," can throw an error, if it does we abandon syntax highlighting and just return the original ",["$","code",null,{"children":"<pre>"}]," tag"]}],"\n",["$","p",null,{"children":["Here's the resulting ",["$","code",null,{"children":"mdx-components.tsx"}]," file:"]}],"\n",["$","pre",null,{"className":"break-words code-block text-wrap","children":["$","code",null,{"className":"language-tsx hljs","dangerouslySetInnerHTML":{"__html":"$6"}}]}],"\n",["$","p",null,{"children":["Notice the extra ",["$","code",null,{"children":"hjls"}]," class I added, that class is not included in the html outputted by ",["$","code",null,{"children":"highlight()"}],",\nbut it is needed to set the text color for a given highlight.js theme.\nNow, remember to include a highlight.js stylesheet in your application and you're good to go!"]}],"\n",["$","h1",null,{"children":"Conclusion"}],"\n",["$","p",null,{"children":["In my post on implementing dark mode I talked about how to toggle stylesheets based on the current theme, if you're interested, see\n",["$","a",null,{"href":"/blog/dark-mode-a-not-so-simple-story","children":"Dark Mode, a Not so Simple Story"}],"."]}],"\n",["$","p",null,{"children":["I have to say I'm really happy with the result here. All the work gets done on the client and the resulting code blocks look great!\nHowever, I think my current implementation can be improved. It was the easiest solution to integrate with the knowledge I had at the time I was creating this blog, but I know there's more out there.",["$","br",null,{}],"\n","In these cases I need to remind myself what the ",["$","em",null,{"children":"purpose"}]," of my blog is. And that's the ",["$","strong",null,{"children":"content"}],".\nI don't want to spend too much time implementing the perfect syntax highlighting system, supporting features that don't\nadd much to my ",["$","em",null,{"children":"WHY"}],".",["$","br",null,{}],"\n","That being said, I'm still curious about exploring plugins like\n",["$","a",null,{"href":"https://github.com/rehype-pretty/rehype-pretty-code?tab=readme-ov-file","children":"rehype-pretty-code"}],"\nwhich offer cool features like line numbers, line highlighting, inline code highlighting, and more!"]}]]}]]}]}],null,["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","mclX4o5QNgyltMkuQwyxs",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","link","1",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x32"}]]
8:null
